#/!/bin/zsh


mlist () { set_screen_title Mlist ; export TERM=xterm ; vim ~/.etc/mail/mboxes.mll ; }
apt-i ()  { apt-get install "$@" ; }
timn () { 
	if [ -f timidity.cfg.$1 ] ; then
		local opt
			opt="-c timidity.cfg.$1"
			fi
			nullpty --timidity-key timidity $opt -A 200 -int -K+24 "$@" ; }

setdriver () { 
	if [ -z "$3" ] ;  then
		lphp.exe ../bin/common/setdriver.php --server=$1 --class=$2 
	else 
		lphp.exe ../bin/common/setdriver.php --server=$1 --class=$2 --driver=$3
	fi
}

	
timcn () { nullpty --timidity-key timidity -int -K+24 "$@" ; }
timkn () { nullpty timidity -intl  "$@" ;   }
otimn () { timidity -intl "$@" ; }
lxrsync (){ rsync -a $* lxlabs.com:/home/admin/lxlabs.com/ ; }
rec () { nice -20 record -l -c -v -o "$@"  ; ff=`/bin/ls -ct *.wav | head -1`;
    gogor  $ff &; sleep 1 ; wait gogo ; plast ; }
rec1 () { nice -20 record -d /dev/dsp1 -l -c -v -o "$@"  ; ff=`/bin/ls -ct *.wav | head -1`;
    gogor  $ff &; sleep 1 ; wait gogo ; plast ; }
ems  () { emacs -title "**AASec" -name emdict -eval '(load-mdict)'  &; }
emm  () { emacs -title "**AEmacs" -name nemacs &; }
emmc () { emacs -title "**AAConfig" -name ncemacs &; }
cshare () { xterm -T client-share -e zsh -c "sex $1" & ; }
scshare () { screen -x client-share ; }
emmce () { emmc ; exit ; }
dnsstuf () { elinks "http://dnsstuff.com/tools/lookup.ch?name=$1&type=A" ; }
daumix () { aumix -d /dev/mixer$1 -I ; }
vgrep () { grep -n "$@" | vim  -q - ; } 
plast () { lxeq `/bin/ls -ct1 "$1"* | head -1`;  }
cvs-get () { cvs up -p -r $2 $1 > $1 ; }
jz () { /usr/local/jazz/jazz "$@" ; }
find-setuid () { /usr/bin/find / -perm -4000 -print ; }
sudoz () { sudo su - -c "zsh" ; }
lynxvim () { export SVIM_TITLE="set" ; vim $*; }

wgetcook () { wget -c --load-cookies=/home/root/.galeon/mozilla/galeon/cookies.txt $* ; }

cvsjoin () { (cd ..; cvs up -j lxadmin4_2 ; cv ci ; cd httpdocs/htmllib/ ; cvs up -j htmllib4_2 ; cv ci ; cd phplib ; cvs up -j phplib4_2 ; cv ci ; )}


linkaudio ()  {
	ln -sf /dev/audio$1 /dev/audio
	ln -sf /dev/dsp$1 /dev/dsp
	ln -sf /dev/mixer$1 /dev/mixer
}

execserver () {
	while :
	do 
	if [ -f ~/.etc/.tmp/execserver.file  ] ;  then
		zsh -c ~/.etc/.tmp/execserver.file ;
		rm ~/.etc/.tmp/execserver.file
	fi
	sleep 3
	done
}

switchservice () {
	service $1 stop
	service $2 restart
}

changedriver () {
	lphp.exe ../bin/common/misc/changedriver.php $*
}
sendtoserver() {
	echo -n "`pwd` ;  $*" > ~/.etc/.tmp/execserver.file
		chmod 755 ~/.etc/.tmp/execserver.file
}
clearexec () {
	local a
	if [ -f ./.clearexec ] ; then
		source ./.clearexec
		a=yes
		__my_pre_clearexec $1
	fi
	"$@"
	if [ "$a" = "yes" ] ; then
		__my_post_clearexec $1
	fi
}

yout () { youtube-dl --username=ligesh99 --password=hellfire $@  ; }

looplxeq () { while : ; do lxeq $* ; done; }
vzctlenter () {
	vzctl exec $1 sh -c "export HOME=/root; export ZDOTDIR=/root/.etc; zsh"
}

flvvid () {
	local c
	c=`basename $1 .flv`
	ffmpeg -i $1 $c.mpg
}

mpconvert () {
	local c
	c=`basename $1 .mp3`
	lxmpg123 -w $c.wav $1
	rm $1
	lame $c.wav $1
	rm $c.wav
}

flvmp3 () {
	local c
	c=`basename $1 .flv`
	ffmpeg  -i $1 -ab 96k $c.mp3
}

mp3-to-wav () {
	local c
	c=`basename $1 .mp3`
	lxmpg123  -w $c.wav $1
}


mvjpg () { mkdir /cr/nnjpg/$1 ; mv *.jpg /cr/nnjpg/$1 ; mv *.JPG /cr/nnjpg/$1 }
lxsq () {  
	local where
	if [ -n "$3" ] ; then
		where="where nname = '$3'" ;
	fi
	local db
	if [ -n "$2" ] ; then
		db=$2;
	else
		db="/etc/lxadmin/lxa.db";
	fi
	
	echo  select '*' from $1  $where ';'| sqlite $db ; }


old-download () { local name
		name=`hostname`.$$
			ssh sify.lxlabs.com "cd download ; mkdir $name ; cd $name; \"$@\"" ;
			scp 'sify.lxlabs.com/download/$name/*' . ; 
			ssh sify.lxlabs.com 'rm -rf download/$name/*' ; }
ffind () { `/usr/bin/which find `  -follow "$@" ; }




get-content () { 
	local dir
	pwd=`pwd`
	if [ -n "$2" ] ; then
	     ssh $1 "cd \"$pwd\" ; tar -czf - $2" | tar -xzf - 
	else
	    ssh $1 "cd \"$pwd\" ; tar -czf - *" | tar -xzf - 
	fi
	}



download () {
		local mname arname
		mname=$1 ;  arname=aaa
		shift
		route add $mname gw sify

		TRAPINT () { route del $mname gw sify ; 
		unset -f TRAPINT ;
		arname="intr"
		}
		"$@"
		if [ $arname != intr ] ; then
			route del $mname gw sify
			unset -f TRAPINT
		fi
}

removelast () { ff=`/bin/ls -ct1 | head -1`; echo -n removing $ff " " ; read a && rm $ff; }
waitfor () { while pidof $1 > /dev/null 2>&1 ; do sleep 1;done ; echo program $1 done }
trcrt () { traceroute -q 1 -n "$@" ; }
mid () { mkid -m ~/.etc/id-lang.map "$@" ; }
lxadmin-ctags () { ctags --langmap=c++:.cpp.chtml.h,c:.c -R  ../liblxlib ../lxadmin-other . ; }
lctags () { ctags --langmap=php:.phps.php.inc $*; }
sctim () { export SCREENRC=~/.etc/screen/timidity ; screen -RR sctimid; }
xtim () { xterm -geometry 104x39+0+0 -e zsh -c sctim  & ; exit}
chord-find () {  
	if [ $1 = "-f" ] ; then
		shift
	js ~/dbase/guitar/chord.js  "$@"
	else 
	js ~/dbase/guitar/name.js "$@" ; 
fi}

set-screen-reg () {
		screen -X register . "$1" &; 
}

get-clipboard () { 
	(export DISPLAY=$1 
	 xsel -p ); }
					

set-clipboard () { 
	(export DISPLAY=$1 
	 export VIM_CLIP="$2"
	 vim -e -c 'let @*=$VIM_CLIP | quit' ); }

sync-clipboard () {
	( set-clipboard $2 `get-clipboard $1` );}
					

vnc-set-clipboard () {
	set-clipboard :1 "$@" ; }

vnc-get-clipboard() {
	get-clipboard :1 "$@" ; }

set_screen_title () {
	if [ -n "$VIM_PSE" ] ; then
		return;
	fi
	if [ -n "$SCREENSHARE" ] ; then
		screen -q -p $WINDOW -X title "$1"
		return
	fi

	if [ -z "$SSH_TTY" ] && [ -n "$STY" ]  ; then
		screen -q -p $WINDOW -X title "$1"
	fi
}

setroute () { 
	while  route -n | grep "^0.0.0.0" 
		do
		route del default
	done
	route add default gw $1 ; 
	route -n | grep "^0.0.0.0" 
}

cpdialog () { /bin/cp ~/.etc/misc/colors.h scripts/lxdialog/ ; rm scripts/lxdialog/*.o ; }
updf ()  {updatedb --output=.slocate.db --localpaths=. ; }
pk () { pkill -f "$@" ; }
pg () { pgrep -f "$@"; }
backup () { cp -a $1 back-`date +%F`_`date +%H`.$1 ; }
mbackup () { mv $1 back-`date +%F`_`date +%H`.$1 ; }
stty_stop_exec () { stty stop undef ; $* ; }

addto-tmpchanlist () {  echo $1 >> ~/dbase/irc/tmp-chan-list ; }
	
getbase () {    echo $1 | cut -f 1 -d \. ; }
mwrt () { lxeq -w `getbase $1`.wav $1 ; }

meqz () { mwrt $1 ; gogor `getbase $1`.wav ; }

lxeq () { lxmpg123 -D -E ~/.etc/VimAmp/mpg.equ "$@"  ; }
ampedit () { vi ~/.etc/VimAmp/VimAmp.m3u ; } 
allmpctomp3 () { 
for i in *.mpc ; do mpctomp3 $i ; done; }

mpctomp3 () { 
	local c
	c=`basename $1 .mpc`
	mppdec --wav $1 $c.wav
	gogo -q 0 -b 128 $c.wav
	rm $c.wav
}

allflactomp3 () { 
for i in *.flac ; do flactomp3 $i ; done; }

flactomp3 () {
	local c
	c=`basename $1 .flac`
	flac -d $1
	gogo -q 0 -b 128 $c.wav
	rm $c.wav
	}

bit () {
bittorrent-console --minport 30000 --maxport 35000 --max_upload_rate 6 *.torrent ; }


fxine () {
	xine `/bin/ls -ct | head -n 10000 | grep '[waMAWm][mvMPpV][VvGigeI]' | grep -v MDFN`
}
emd () { emacs --debug-init &; }

wm () { w3m -config ~/.etc/w3m/config $*; }
xclshare      () { if [ "$3" = "-force" ] ; then
				SCREENSHARE="force"
			else
				SCREENSHARE="something"
			fi
			if [ $1 = "localhost" ] ; then
				export SCREENSHARE=force
				xterm -name lxlclientsharefl -T "$1 - $2: Share" -geometry 98x30+0+0 -e /bin/zsh -c "shared-session $2" &
			else
			  if [ "$3" = "-force" ] ; then 
			  	xterm -name lxlclientshareff -T "$1 - $2: Share" -geometry 98x30+0+0 -e ssh -t $1 "export SCREENRC=~/.etc/screen/screenrc ; export ZDOTDIR=~/.etc; export SCREENSHARE=$SCREENSHARE; zsh -c \"shared-session $2\" ; read a ;" & 
			else
					xterm -name lxlclientshareo -T "$1 - $2: Share" -geometry 98x30+0+0 -e ssh -t others@$1 "export SCREENRC=~/.etc/screen/screenrc ; export SCREENSHARE=$SCREENSHARE;  screen -r root/$2 ; read a ;" & 
			fi
			fi; }

screen-attach-root () { screen -r root/$1 ; read a ;}

smsq () { (cd /var/spool/sms ; ls -Al ) ;  }



shared-session () { 
			if sls | grep -i $1 ; then
			screen -x $1;
			else
				if [ "$SCREENSHARE" != "force" ] ; then
					echo "NO screens to attach"
				else
					screen -RR $1; 
				fi
			fi;  }

	
xbiff-kill () { ka xbiff ; }
xbiff-start () { if pidof xbiff ; then
			return ;
			fi
			 ; xbiff -name xbnet & ; xbiff &; 
xbiff -name xbchat  &
			 
			 }
mozwin() { if pidof mozilla-bin > /dev/null 2>&1 ; 
		then mozilla -remote "openURL($1)"  
		else mozilla "$1" &
		fi; return 0;  }
vncservstart () { vncserver -geometry 950x610 "$@" ; }
vncstart () { vncviewer -passwd ~/dbase/data/vncpasswd -Shared -geometry +0+0  "$@"; }
exdisp () { if [ "$2" != "" ] ; then
			export DISPLAY=$1:$2
			else 
			export DISPLAY=$1:0 ; fi; }
pidf () { pidof $1 | awk '{ print $2 }' ; }

emlnx () { export TERM=xterm-color ;
	set_screen_title "Browser:" ; emacs -nw ; }
embr () { emacs -nw --eval '(load "~/.etc/emacs/mdict.el")'  ; }
psm ()  { ps -vx | grep -v "grep" | grep $1 | awk '{print $7}' ; }
run-loc-chat () { if [ $# = 0 ] ; then
					echo "run-loc-chat <nickname>"
					return 
				fi
				while : ; do 
				if [ $USERNAME = "root" ] ; then 
					su - irc -c "export IRCNAME=$1 ; lxchat $1 root -c \#lxlabs" ;
				else
					export IRCNAME=$1 ; epic $1 root -c \#lxlabs ;
				fi 
				echo
				echo restarting chat wait...; sleep 3;  done ; }
run-chat () {  set_screen_title "Chat $1 $2"
				if [ $# = 0 ] ; then
					echo "run-chat <nickname> <machine>"
					return
				fi
				while : ; do 
					lxchat-sup -B lx_$1 support.lxlabs.com:4507::::irc-ssl;
				echo
				echo restarting chat wait...; sleep 3; echo starting now ;  done ; }

chat-addclient () { echo $1 >> /home/irc/dbase/irc/chan-list ; }
wrned	() { vim -E -c "call WarnEdit('$1', $2)" ~/.etc/warn-sound.conf ; }
elnvi 	() { vi ~/dbase/elance/main-list.meln ; }
scpaste () { if [ "$2" != "NULL" ] ;  then
				screen -S $1 -X select $2 ; sleep 1  
			fi
		screen -S $1 -X register p "$3" ; sleep 1; screen -S $1 -X paste p ; }


chkrun() { for i in epic-sup fetchmail
		do
		if ! pidof $i > /dev/null ; then 
				echo $i not running ; 
			fi;
	 	done ; }
supdate-chat () { mkdir /usr/local/share/epic/; scp $1:/usr/local/bin/lxchat-base /usr/local/bin ;
	ln -sf /usr/local/bin/{lxchat-base,lxchat-sup} ; }
re	() { sync; mount / -o remount,ro ; }
fca		() { fc -A  ; }
fcr		() { fc -R ; }
lnximg () { lnx -image_links "$@" ; }
lss () {  less -f -r "$@" ; }
chl() { for i in /home/irc/.etc/.tmp/chat ~/.etc/.tmp/chat 
		do (echo $i; cd $i && ls --color -RC * | grep -v "total 0";)
		done ;}



lbsiteup () { bsiteup lxlabs.com "$@" ; }
bsiteup () { 
		machine=$1 ;
		shift;
		pw=`pwd`
		tar -czf - "$@" | ssh  $machine "cd $pw ; tar -xzf -";
}

gogor () { gogo $1 ; rm $1; }

rem		() { month=`date +%m` ;
			 year=`date +%y`
			 day=`date +%d` ;

			 if [ $# != 0 ] ;then
				let day=$day+$1
			fi
			 vi rem-$day-$month-$year.rem ; }
cvsown () { cd /mnt/raid/cvs 
			for i in * ; do
				if [ $i = "CVSROOT" ] || [ $i = "back" ] ; then
					continue;
				fi
			chown -R cvsusers.$i $i
			done ; cd - ; }
			


fgrp() { grep "$@" `find . -type f`  ; }
uxt () { urlextract $1 >> ~/a.wget ; }


mace () {	make -C "$@" ; }
cvci () {	cvs ci -m '' ; }
cvsinit () { for i in `cat .etc/version1-files` ; do cvs up -p -r 1.1 $i > $i ; done ; }
ap	() {	apropos "$@" ;		}
psg	() {	ps ax --cols=$COLUMNS | grep -v "grep .i $@" | grep -v psg |  grep -i "$@"  ;		}
psgv	() {	ps axv --cols=$COLUMNS | grep -v "grep .i $@" | grep -v psg |  grep -i "$@"  ;		}
psgu	() {	ps axu --cols=$COLUMNS | grep -v "grep .i $@" | grep -v psg |  grep -i "$@"  ;		}
psgf (){	ps axf --cols=100 | grep -v grep | grep -A 3 -B 3 "$@" ; }
kan	() {	ka -9 	"$@"	; }
netsa	() {	netstat -ap "$@" ; }
netsl	() {	netstat -lp "$@" ; }

lresModuletmp() { bsdloadmodule.sh ~/wh/inc/code/bsd/pci/a.o  ;			}
ml	() {	unset ENV ; modload "$@" ; 				}
bz	() {	file=$1; shift; bzcat ../patch-$file.bz2 | patch -p1 "$@" ;			}
cp	() {	/bin/cp -i "$@"	 ;					}
mv	() {	/bin/mv -i "$@"	 ;					}
bk	() {	for i in  mail articles Config/ ; do  /bin/cp -uai $i ~/wh/backup/ ; done ; }
plnx	() {	lnx -dump www.karnataka.dotindia.com/bgtd_enq/search_num.php?phoneno=$1\&searchResult2 | grep -v '\[BUTTON\]' ; }
lct	() {	locate -d .slocate.db "$@"  ; 			}
rp	() {	~/wh/pub/software/RealPlayer8/realplay "$@" ; }
am	() { 	/usr/local/Amaya/applis/bin/amaya  "$@";			}
sdrt	() {	ssh "$1" "route del default ; route add default gw $2"	; }
dfrt	() {	route del default ;  route add default gw $1 ; }
trx	() {  let n=1  ; let match=1
		for i in `tar -t "$@"` ; do
			if [ $n -eq 1 ] ; then
				val="`echo $i | cut -d '/' -f 1`"
				let n=n+1
			else
				tval="`echo $i | cut -d '/' -f 1`"
				if [ $val != $tval ] ; then
					let match=0
					break
				fi
			fi
		done

		if [ $match -eq 1 ] ; then
			tar -x "$@" ;
		else
			echo "No directory....."
			dir=`echo $2 | cut -d '.' -f 1`
			echo "Creating Directory " $dir "...."
			mkdir $dir
			tar -C $dir -x "$@"
		fi ;		}

ldon	() {	ps ax  --cols=100 | grep -v " grep " | grep wget  ;			}
ctrm	() {	for i in "$@" ; do 
				if [ -f $i ] ; then 
						if cat $i >> back/$i ; then rm $i ;	fi ;			
				fi
				done ; }

ctex	() {	(ctags -I EXPORT_SYMBOL\+ -R "$@" &) ; 			}

mssh () {

	if [ $1 = "-c" ]; then
		set_screen_title "Sex: $1 $2 $3" ; 
	title="$1 $2";
		shift ; shift ;
	else 
		title="$*";
		set_screen_title "Sex $*";
	fi
	ssh "$@";
}


coresex	() { 
	
	local title
	if [ $1 = "-c" ]; then
		set_screen_title "Sex: $1 $2 $3" ; 
	title="$1 $2";
		shift ; shift ;
	else 
		title="$*";
		set_screen_title "Sex $*";
	fi

	ssh -t -l $remoteuser "$@" "export WINDOW=$WINDOW; ZDOTDIR=~/.etc exec zsh " 
	unset remoteuser


	set_screen_title "Sex-Exit `get_cwd` $title"  ;
}

sex () {
	export remoteuser=root
	coresex "$@"
}
winsex () {
	export remoteuser=Administrator
	coresex "$@"
}


ssex () { 
		set_screen_title "SSex: $*" ; 
		ssh -t "$@" "export WINDOW=$WINDOW; exec zsh " 
		set_screen_title "Sex-Exit `get_cwd`" ;
}

sdf	() {	sex "$@"  ;}
sexo () {    ssh -t "$@" "export WINDOW=$WINDOW; exec bash --rcfile ~/.etc/f.bashrc" ;       }
selscr () { screen -X select "$@" ; }
exscreen () { screen -X "$@" ;  }
screen_share_current () { screen -X selectall $WINDOW ; }
nextscreen () { screen -X select `expr $WINDOW + 1` ; }
prevscreen () { screen -X select `expr $WINDOW - 1` ; }
vim-configure () { rm -rf /usr/share/vim ; ./configure --prefix=/usr --with-features=huge ; }
sxo () {    ssh -t "$@" "export WINDOW=$WINDOW; exec bash --rcfile ~/.etc/f.bashrc" ;       }
vix	() {	vim -X "$@"			; 		}
fls	() {	arg=$1 ; shift ;
		for i in * ; do if [ "$arg" "$i" ] ; then "$@" "$i" ; fi ; done ; }
fet	() {	ka fetchmail ;fetchmail -d0 -v -f ~/.etc/mail/rcfet	; }
vip	() {	vim -c 'set nocp | source ~/.etc/vim/vpager.vim' -u ~/.etc/vim/vimrc.vim - 	; 	}
ng	() {	
	local ip out;
	out=`host $1`
		echo $out;
	if  echo  $out | grep -iq 'has address'  ; then
		ip=`echo $out | awk '{print $4} ' `
	else
		ip=$1
	fi
	elinks http://192.172.226.77/perl/netgeo.cgi\?target=$ip  ;}

hs	() {	history "$@" ; }
lnic	() {	lnx http://www.iciciconnect.com/pfsportal/htdocs/pfs/ibank/icicibank11.html ; }
upd	() {	/bin/cp -au ~root/.etc ~/ ; /bin/cp -au ~root/.etc/bin ~/; }
xbc	() {	(xbiff -fg red -xrm "xbiff*checkCommand: chat" & );  }
scscpid() {	screen -X register p "scpid $1$2" ;
			screen -X paste p ; }

lxlabsconsole () { 
	mssh ES-228280:7008@66.98.210.254
}

docheckhostname() {
			local hname hst
			hname=`echo $HOSTNAME | cut -d . -f 1`
			hst=`echo $HOST | cut -d . -f 1`
			if [ "$HOSTNAME" = "self" ] || [ $hst = "self" ]  ; then
				return 1
			else 
				return 0
			fi
}


checkhostname () {
	docheckhostname
		if [ $? = 1 ] ; then
			echo You moron. What are you trying to do...
				read a 
				exit
		fi
}

supdate() {	
			checkhostname
			curdir=`pwd`
			cd ; mkdir ~/Config > /dev/null 2>&1 ;


			/bin/cp ~/Config/mconfig.tgz ~/Config/old.mconfig.tgz
			(cd ~/Config ; rm -f mconfig.tgz ; wget download.lxlabs.com/config/mconfig.tgz)
			gzip -d -c Config/mconfig.tgz | tar -xf - 
			
			(cd ~/Config ; rm -f priv.tgz ;  wget download.lxlabs.com/config/priv.tgz)
			gzip -d -c Config/priv.tgz | tar -xf - 

			if ! [ -f /etc/initsysdone ] ; then
				sh ~/.etc/bin/aascripts/initsys.sh
			fi

			sh ~/.etc/bin/aascripts/initconf.sh; 
			cd $curdir; dob; 

}
alm	() {	if [ $# = 1 ] ; then
			aumix -w $1 ; 
		fi
		ka lxmpg123 mpg123
		mpg123 /etc/alarm.mp3 ; 					}


ssh-install-zsh () { ssh "$@" yum -y install which zsh vim-enhanced ; }

sinst () { 
	mcnf
	ssh "$1" mkdir Config ; scp ~/Config/mconfig.tgz $1:Config
	ssh -t "$1" "(gzip -d -c Config/mconfig.tgz | tar -xf - ; sh ~/.etc/bin/aascripts/initconf-client.sh ) "
}


scpid-redir () { scp $1:.ssh/id_dsa.pub .id-dsa.tmp.pub ;
				shift
				scpid -f .id-dsa.tmp $@
				rm -f .id-dsa.tmp
}

cvsco () {
	cvs -d:pserver:william@root.lxlabs.com:/mnt/raid/cvs co -r $1_$2 $1
}

client-info () { if [ $# = 0 ] ; then
					wget -O - -o /dev/null lxlabs.net/clients/client-1.lst 
				else
					wget -O - -o /dev/null lxlabs.net/clients/client-1.lst  | grep $1
				fi; }

corescpid	() { if [ $1 = -f ] ; then
				 file=$2
				shift
				shift
			 else
		 	    file=~/.ssh/id_dsa
				if ! [ -f $file.pub ] ; then ; ssh-keygen -d -q -N '' -f $file ; fi;
			fi

			cat $file.pub | ssh -l $remoteuser "$@" "(mkdir -p .ssh; cat>>.ssh/authorized_keys2 ; chmod -R 700 .ssh )" 
			 unset file ; }

scpid () {
	export remoteuser=root
	corescpid "$@"
}
winscpid () {
	export remoteuser=Administrator
	corescpid "$@"
}


sync-client-list () { cat $1 | ssh lxlabs.com "(cat > client-list ; /home/lxlabs.com/html/hdesk/create_new_client.php ~/client-list )" ; }
szsh   () { sudo zsh ; } 
scpido	() {	cat ~/.ssh/identity.pub | ssh "$@" "(mkdir .ssh; cat>>.ssh/authorized_keys; chmod -R 700 .ssh;)" ; }
bsh	() {	bash --rcfile ~/.etc/f.bashrc "$@" ;		}
pqr	() {	ls  --color;					}
sdb	() {	sudo bash --rcfile ~/.etc/f.bashrc "$@"	 ;	}
rtn	() {	route -n ;					}
mkis	() {	mkisofs -l -R "$@" 	;			}
kam	() {	ka lxmpg123 ;					}
mmail	() {	echo $2 | mutt $1 -a $2 -s $2 ;			}
lchl	() {	lc /var/www/html ;				}	
fnt	() {	vi -c "7" ~/.netrc 		;			}
rnt	() {	mount -o remount,r$1 $2	 ;			}
mkstg	() {	mkisofs -l -R -o /origone/lxlabs/base/stage2.img  /bstage/ ; }
mkori	() {	mkisofs -l -R -b images/boot.img \
		-o /mnt/d_aum/cdrom.img  -V Lxlinux /origone/ ; }
mkors	() {	mkisofs -l -R  -o  /mnt/d_aum/cdrom2.img /orsec/ ; }
vis	() {	vim --servername hello "$@" ; 			}
l	() {	ls -l "$@" ;					}
ldir	() {	ls -l "$@" | grep ^d ; 				}
ndictedn	() {	name=`echo $1 | cut -f 2 -d = `
		name=`echo $name | cut -f 1 -d \&`
		name=`echo $name | cut -f 1 -d .`
		word=$name
		name=$name.dlxl
		/bin/mv -- $1 $name
#	vi -s src/Vdict.vim -- $name ; 
		n=`echo $name | cut -c1`
		nn=`echo $name | cut -c2`
		echo >>  $n.dict/${n}${nn}.dlxl
		echo "@WORD: $word" >>  $n.dict/${n}${nn}.dlxl
		cat -- $name>> $n.dict/${n}${nn}.dlxl
		/bin/mv -- $name ../fulldict/$n.full ;				}
dicted	() {	name=`echo $1 | cut -f 2 -d = `
		name=`echo $name | cut -f 1 -d \&`
		name=`echo $name | cut -f 1 -d .`
		word=$name
		name=$name.dlxl
		/bin/mv -- $1 $name
		vi -s src/Vdict.vim -- $name ; 
		n=`echo $name | cut -c1`
		nn=`echo $name | cut -c2`
		echo >>  $n.dict/${n}${nn}.dlxl
		echo "@WORD: $word" >>  $n.dict/${n}${nn}.dlxl
		cat -- $name>> $n.dict/${n}${nn}.dlxl
		/bin/mv -- $name ../fulldict/$n.full ;				}
dvi	() { cd ~/dbase/dict ;	vi -X master_word.dctf ; 		}
mp	() {	mplayer -vo x11 "$@" ; }
rdvi	() {	vi -X ~/.etc/nsword \
			~/dbase/dict/roget.ths ;		}


chtemp () { if [ "$1" = "index" ] ; then
				mv template.shtml index.shtml
				a=`pwd`
				b=`basename $a`
				mv template.html  $b.html
			else
				mv template.shtml $1.shtml
				mv template.html $1.html
			fi ; }
			 

chtempl () { if [ "$1" = "index" ] ; then
				mv template.shtml index.shtml
				a=`pwd`
				b=`basename $a`
				mv template.html  $b.html
				mv template_right.html ${b}_right.html
			else
				mv template.shtml $1.shtml
				mv template.html $1.html
				mv template_right.html ${1}_right.html
			fi ; }


preexec() {
}
mutn	() {	mutt -F ~/.etc/mail/news -y   ;				}
mutm	() {	mutt -F ~/.etc/mail/mboxes -y "$@" ;			}
mut	() {	mutt -F ~/.etc/mail/muttrc "$@" ;			}
mutf	() {	mutt -F ~/.etc/mail/muttrc -f "$@" ;			}
mutl	() {	mutt -F ~/.etc/mail/lboxes -y "$@" ;			}
mutcl	() {	mutt -F ~/.etc/mail/clboxes -y "$@" ;			}
wrt	() {	cdrecord -v dev=0,0,0 speed=8 "$@" ;			}
wrtatapi () {    cdrecord -v dev=ATAPI:0,1,0 speed=8 "$@" ;          }
ftcm	() {	fetchmail  -f ~/mail/repos/fetchmailrc "$@" ;		}
ftcmf	() {	ka fetchmail ;fetchmail -d0 -v -e 15 -f ~/mail/repos/fetchmailrc	; ftcm ; }
tp	() {	lxtop ; 					}
lrc	() {	rm -f ~/.etc/.tmp/lyric*
		lc /usr/lirics_dbase
		if [ "$1" = "p" ]
		then
			cat ~/.etc/VimAmp/.mpgout | plist
		else
			if [ $# = 2 ] ; then
				echo "$1 - $2" | plist
			else
				echo  -n "Band: " ; read band
				echo  -n "Song: " ; read song
				if [ -n "$song" ] ; then
					echo "$band - $song" | plist
				fi
			fi
			unset band song
		fi
		lcx ;
		if [ -f ~/.etc/.tmp/lyric.txt ]
		then vi ~/.etc/.tmp/lyric.txt ; fi;
		rm -f ~/.etc/.tmp/lyric.* ; 			}

gpl	() {	gnuplot ~/.etc/gnuplot .plot ;			}
gnpl	() {	gnuplot ~/.etc/gnuplot "$@" ;			}
vplt	() {	vi .plot	; 				}
gps	() {	gs -sDEVICE=jpeg -sOutputFile=foo%02d.jpg \
		-dBATCH -dNOPAUSE -q "$@" ;			}
gcn	() {	gs -sDEVICE=bj200 -sOutputFile=foo%02d.jpg \
		-dBATCH -dNOPAUSE -q "$@" ;			}
r	() {	fc -s "$*";					}
spc	() {	/bin/cp $1 ~/.etc/.tmp/screen_buffer	;		}
scre	() {	if [ $# = 0 ]; then
			exec screen screen \
			$SHELL  ;
		else
			screen "$@" ;			
		fi;						}
scr	() {	if [ $# = 0 ]; then
			screen screen \
			$SHELL  ;
		else
			screen "$@" 
		fi;						}
sls	() {	screen -ls ;					}
mkvi	() {	make 2>&1| tee ~/.etc/.tmp/.tvimerr 
			 exit $PIPESTATUS ;			}
svi	() {	vi ~/.etc/.tmp/Screen.	;			}
sccvi	() {	if [ $# = 0 ] ; then
			vi ~/.etc/.tmp/hardcopy.? ;
		else
			vi ~/.etc/.tmp/hardcopy.$1; 
		fi;						}
dob	() {	. ~/.etc/zshrc ;					}
ka  	() {
	
	for i in $* ; do
		if pgrep -f $i ;
	then pkill -f $i ;
		else echo "$i No Process"; fi
			done
}
		
fndc	() {	find . -name core ;				}
dlnx	() {	lc ~/dbase/dict/ ;
		if [ $# = 0 ]   ;then
			lnx -verbose ~/.etc/net/dictionary.html ;	
		else 
			word=${1// /+}
			lnx -image_links 'http://dictionary.reference.com/search?q='"$word"
		fi ; }
lnx	() {	if [ "$#" = 0 ] ; then 
			lc ~/wh/net ; 
				screen -p $WINDOW -X title "Lynx: "
			lynx "$@" ; lcx ;
		else
			if [ "$1" = "-n" ] ; then
				screen -p $WINDOW -X title "lynx: $2"
				lynx
			else
				screen -p $WINDOW -X title "lynx: $1"
				lynx "$@"
			fi
		fi   ;						}
lnxi	() {	if [ "$#" = 0 ] ; then 
		screen -p $WINDOW -X title "Lynx: "
			lc ~/wh/net; lynx_i_c "$@" ; lcx ;
		else
			screen -p $WINDOW -X title "lynx: $1"
			lynx_i_c "$@"
		fi   ;						}

pdc ()
{
    isp=${1:-tatanova};
    echo "calling $isp...";
    while true; do
        pppd call $isp;
        sleep 1;
    done
}

full-screen () { vi -c 'q' ; }
lnxf	() {	lnx --force-html "$@" ; 				}
lonx	() {	bck.lynx "$@"	;				}
parg	() {	cmd=$1 ; shift
		for i in "$@"
		do
		$cmd $i 
	        done
		unset cmd;					}
mcnf	() {	
		cd
		tar -czf ~/Config/mconfig.tgz -T ~/.etc/misc/mconf.tr  -X .etc/misc/nconf-tar ;
		/bin/cp ~/Config/mconfig.tgz ~/Config/copy.mconfig.tgz ;			
		tar -czf ~/Config/priv.tgz -T ~/.etc/misc/priv.tr 

		scp ~/Config/mconfig.tgz download.lxlabs.com:/home/download/download.lxlabs.com//config/
		scp ~/Config/priv.tgz download.lxlabs.com:/home/download/download.lxlabs.com/config/

		cd - ;
}

scnf	() {	cd ;
		tar -czf ~/Config/sconfig.tgz  -T .etc/misc/sconf-tar;
		cd - ;						}
chne	() {	for i  in *."$1"; do 
		base=`basename $i .$1`
		mv -i -- $i "$base"."$2"
		done
		unset base ;					}
rpq	() {	rpm -qip "$@" ;				}
#ps	() {	oldps "$@"	;				}


######################################################
###############################Compile Maps 
ccc	() {	fil=`echo $1|cut -f 1 -d \.`	
		cc -g "$@" -o "$fil" ; unset fil ;		}

######## Removes crti1.o when argument is . or ..; mostly happens when cd is mistyped.
#c	() {	fil=`echo $1|cut -f 1 -d \.`	if cc -g "$@" -o "$fil" then "$fil";fi ;unset fil;}


cgd	() {	fil=`echo $1|cut -f 1 -d \.`	
			if cc -g "$@" -o "$fil"	 -llxlib
			then gdb "$fil";fi ;	
			unset fil;				}
mkcl	() {	make clean ;					}
mak	() {	if make ; then .ea ; fi ;			}
cmak	() { 	if ! [ -f Makefile ] 
		then
			var="a.cc"
			if [ -n "$1" ]
			then	
				var=$1
			fi
			fil=`echo $var|cut -f 1 -d \.`	
			echo "include ~/.etc/Rules.make " > Makefile
			echo >> Makefile
			echo "all: $fil" >> Makefile
			echo >> Makefile
			echo "$fil: $var" >> Makefile
			echo "	cc \${CFLAGS} $var -o "$fil" \${LDFLAGS} " >> Makefile
			echo >> Makefile
			echo "vim_run:" >> Makefile
			echo "	./${fil}"	>> Makefile
			echo "" >> Makefile
			echo "clean:" >> Makefile
			echo "	rm -f ${fil}" >> Makefile
			echo "	find . \( -name '*.o' -o -name core \) -exec rm -f '{}' ';'" >> Makefile
		fi ;	unset var fil	;			}
################################### End Compile Map

################################################################
############################## 
vlf	() {	vi ~/.etc/.tmp/sdirstack ;			}
lf	() {	if [ "$#" = 0 ] 
		then scd -l ;
		elif [ "$1" = "-f" ]
		then scd "$@"
		elif [ "$1" = "-d" ]
		then scd "$@"
		else
		cd  "`scd "$@"`"
		fi		;				}
lfv	() {	if [ "$#" = 0 ] 
		then scd -l ;
		elif [ "$1" = "-f" ]
		then scd "$@"
		elif [ "$1" = "-d" ]
		then scd "$@"
		else
		vi "`scd "$@"`"
		fi		;				}
get_cwd() { cwd=`pwd` ; cwd=${cwd/$HOME/\~} ; echo $cwd ; unset cwd ; }
cd () { builtin cd "$@" ; ; set_screen_title "Zsh: `get_cwd`" ; }
lfa	() {	lf a ;						}
lfb	() {	lf b ;						}
lc	() {	if [ "$#" = 0 ] 
			then lcd -l ;
		elif [ "$1" = "s" ]
			then  lcd ; cd
		elif [ "$1" = "-f" ]
			then lcd "$@"
		elif [ "$1" = "-d" ]
			then lcd "$@"
		elif [ "$1" = "." ]
			then cd .
		elif [ `expr length "$1"` = 1 ] 
			then cd  "`lcd "$@"`"
		else
			cd "$@"
		fi		;		
#set_screen_title "Zsh: `pwd`"
		}
lcv	() {	if [ "$#" = 0 ] 
		then lcd -l ;
		elif [ "$1" = "s" ]
		then  lcd ; cd
		elif [ "$1" = "-f" ]
		then lcd "$@"
		elif [ "$1" = "-d" ]
		then lcd "$@"
		else
		vi "`lcd "$@"`"
		fi		;				}


lcb	() {	lc b ;						}
lca	() {	lc a ;						}
lcs	() {	lc s ;						}
lcx	() {	lcd; cd - ;					}
lcmn	() {	lcd; cd /usr/src/redhat/main ;			}
lcred	() {	lcd; cdm ; cd /mnt/cdrom/lxlabs/RPMS ;		}
lckln	() {	lcd; cd /usr/src/kernel ;			}
lcsrp	() {	lcd; cd /usr/src/redhat/SRPMS  ;		}
lcsrc	() {	lcd; cd /usr/src/redhat/SOURCES ;		}
lcspc	() {	lcd; cd	/usr/src/redhat/SPECS; 			}
lcbld	() {	lcd; cd /usr/src/redhat/BUILD ;			}
lcrpt	() {	lcd; cd /usr/src/redhat/RPMS/i386/;		}
lcrpn	() {	lcd; cd /usr/src/redhat/RPMS/noarch/;		}
lcrps	() {	lcd; cd /usr/src/redhat/RPMS/x86_64/;		}

lv	() {	if [ $# = 0 ] 
		then vihist
		else vi "`vihist $1`";
		fi		; 				}

lvv	() {	if [ $# = 0 ] 
		then vimark
		else vi -c "normal \``asci -d $1`" 
		fi		; 				}
lva	() {	lv a ;						}
lvb	() {	lv b ;						}
lvs	() {	if [ $# = 0 ] 
		then vihist
		else vis `vihist "$@"` ; 
		fi		; 				}
lvsa	() {	lvs a ;						}
lvsb	() {	lvs b ;						}
lvi	() {	if [ $# = 0 ] 
		then vi -c "set t_ti=0|set t_te=0|marks |quit"
		echo 
		else vi -c "normal \``asci -u $1`" 
		fi		; 				}
vv 	() { 	vi -u "$@" ;					}
####################################


############################################################################
######################### Conditional Mpg mapings
auv	() {	aumix -v "$@" ;					}
aup	() {	aumix -w "$@" ;					}
auvi	() {	aumix -v +5 ;					}
auvd	() {	aumix -v -5 ;					}
aub	() {	aumix -b "$@" ;					}
aut	() {	aumix -t "$@" ;					}
pll	() {	/bin/cp $MPEGRC/"$1".m3u $MPEGRC/VimAmp.m3u; 	}
lmpg	() {	mpg123 --equalizer $MPEGRC/mpg.equ -z -@ $MPEGRC/VimAmp.m3u ;}
mpg	() {	mpg123 --equalizer $MPEGRC/mpg.equ "$@" ;	}
amn	() {	cat $MPEGRC/.mpgout ; echo 	;		}
if [ -n "$MPG" ]
then 
samp	() {	screen -m -d -S amp empg $MPEGRC/VimAmp.m3u ;	}
sramp	() {	screen -r amp	;				}
sdamp	() {	screen -d amp	;				}
xamp	() {	(xterm -e empg $MPEGRC/VimAmp.m3u &) ;		}
amp	() {	empg $MPEGRC/VimAmp.m3u ;				}
#amq	() {	asci -a 249 > $MPEGRC/.mpg_fifo ;		}
amz	() {	echo -n "1 63999 " > $MPEGRC/.mpg_fifo ;		}
amx	() {	echo -n "1 64000 " > $MPEGRC/.mpg_fifo ;		}
amc	() {	echo -n "1 64001 " > $MPEGRC/.mpg_fifo ;		}
amv	() {	echo -n "1 64002 " > $MPEGRC/.mpg_fifo ;		}
amb	() {	echo -n "1 64003 " > $MPEGRC/.mpg_fifo ;		}
ama	() {	echo -n $1  > $MPEGRC/.mpg_fifo ;		}
else
amp	() {	xmms $MPEGRC/VimAmp.m3u ;				}
amx	() {	xmms -p "$@"	;				}
amz	() {	xmms -r ;					}
amb	() {	xmms -f ;					}
amv	() {	xmms -s ;					}
amc	() {	if [ -f ~/.etc/.tmp/.xamp_stop ]
		then
			killall -18 xmms
			rm ~/.etc/.tmp/.xamp_stop
		else
			killall -19 xmms
			echo > ~/.etc/.tmp/.xamp_stop
		fi	;					}
amq	() {	ka xmms ;					}
fi
############################# End Mpg Map

smscr () { screen -m -c ~/.etc/screen/smallscreenrc ; }
mnt	() {	if mount "$@" ; then
		cd $1 ; fi ; 					}
cdm	() { 	if mount /mnt/cdrom  
		then cd /mnt/cdrom ;	fi ;			}
cdu	() {	if echo `pwd` | grep -q "/mnt/cdrom"
		then  cd /mnt ; fi ; eject  /dev/cdrom;		}
wrm	() { 	if mount /mnt/writer  
		then cd /mnt/writer ;	fi ;			}
wru	() {	if echo `pwd` | grep -q "/mnt/writer"
		then  cd /mnt ; fi ; eject  /dev/writer;	}
flm	() {	if mount /dev/fd0
		then cd /mnt/floppy ;	fi;			}
flu	() {	if echo `pwd` | grep -q  "/mnt/floppy"
		then cd /mnt ; fi; umount /mnt/floppy;		}


rc	() {	rm core ;					}
xnr () {    export  DISPLAY=:0; (X &); sleep 5; xhost +; host=server.lxlabs.com; 
		if [ -n "$1" ] ;then host=$1; shift; fi; 
		ssh -t $host -X 'zsh -c "/usr/bin/fvwm -cmd \"/usr/lib/X11/fvwm2/FvwmM4 $HOME/.etc/xxwin/fvwm2rc.m4\""' ; 	}
xnt	() {	(xinit "$@" &) ;					}
xtth	() {	(xterm -T HFirst -name lxlnxterm -geometry 78x15+0+300 &) ;
		(xterm -T HSecond -name lxlnxterm -geometry 78x15+0+0 &) ;	
		exit ;						}
xmchat () { xterm -samename -title "*AChat" -name lxlxchat -e screen -RR xchat zsh & ; exit ; }



xttv	() {	(xterm -T VFirst -geometry 39x28+400+0 &)
		(xterm -T VSecond -geometry 39x28+0+0 &) ; 
		exit;						}
hxt	() {	xterm -T "AChat"  -name xmdict -e screen -RR cchat \
		   $SHELL   ;		}
cxt	() {	xterm -T "AClients"  -name xmdict -e screen -RR clients \
		   $SHELL  ;		}
dxt	() {	xterm -T Download -e screen -RR download \
		   $SHELL  ;		}
dxts	() {	screen -q -wipe download ; screen -q -ls download ;
		if [ "$?" = 8 ] ; then
			screen -S download -m -d zsh 		
					if [ "$1" = "sleep" ]; then
				sleep 4
			fi
		fi ;							}
mxt	() {	screen -wipe  > /dev/null 2>&1;
			if screen -ls 2>&1 | grep -s abdict | grep Attached ; then
				echo already running
				return
			fi
			xterm -name xmdict -T '*ABDict: Mail And Dictionary '   -e screen -RR abdict   screen ~/.etc/screen/mail_dict;	
}
nxt	()
{  
	SCREENRC=$HOME/.etc/screen/screenall xterm -T '**AAMain' -name nxterm  -e screen -RR aamain $SHELL
}
sxt	() {	xterm -T '*AASMain' -name lxlnxterm  -e screen -RR aasmain  $SHELL  ;		}

rpmext () { rpm2cpio $1 | cpio -idv   ; }
nxs	() {	xterm -T '*AAMain' -name lxlnxterm -e screen -RR aamain ~/.etc/screen/aamain ;		}
cxte	() {	(cxt &) ; exit ;				}
hxte	() {	(hxt &) ; exit ; 				}
dxte	() {  	(dxt &) ; exit ;				}
mxte	() {	(mxt &) ; exit ;				}
nxte	() {	(nxt &) ; exit ;				}
sxte	() {	(sxt&) ; exit ;				}
nxse    () {    (nxs &) ; exit ;                }
rds	() {	rdesktop -K -a 16 -f -u Administrator "$@" &; exit; }
openmysql () {
	local ver
	if [ $1 = "kloxo" ] ; then
		ver=""
	else 
		ver="1_0"
	fi

	mysql -u $1 -p`cat /usr/local/lxlabs/$1/etc/conf/$1.pass ` $1$ver
}


rdso () { 

	local username password
		
	file="$HOME/dbase/data/rds-data/$1"
	if [ -f  ] ; then
		username=`head -1 $file`
		password=`head -2 $file | tail -1`
	fi
	rdesktop -a 16 -f -u $username -p $password $1 & ; exit
}

execbackend () {

	local prgtype
	if [ -z $2 ] ; then
		prgtype=master
	else 
		prgtype=$2
	fi

	pkill -f $1.exe
	pkill -f $1-wrapper
	 (cd /usr/local/lxlabs/$1/httpdocs ; lphp.exe ../sbin/$1.php $prgtype)
}
		
rdsne	() {	rdesktop -a 16 -f `cat ~/dbase/data/rdesktop` "$@" }
rdsn	() {	rdesktop "$@" ;		}
erds	() {	(DISPLAY=:1  rds &) ;			}
xrds	() {	(unset XINITRC ; X :1 & )	;	}
fvxt	() {	file=~/.etc/.tmp/.xtermno_
		n=`echo $file | count _`
		n=`expr $n + 1`
		if /usr/bin/test -f $file* ;  then
			tt=`/bin/ls $file* | cut -f $n -d _`
			let ttt=$tt+1
		  	rm -f $file*
			echo > $file$ttt
		 else 
		 	echo > "$file"2
			tt=1  	
		 fi
		 unset n file;
		 ( $XTERM -T "Hello "$tt""  & );		} 

################################## Less Important Maps
kpp	() {	(kppp &) ;					}
chnm	() {	file=`echo $1 | cut -f 6 -d \.`
		mv $i "$file".html
		unset file ;					}
pcp	() {	for i in "$@"  ; do 
			cp $i ~/print/$i.txt  
			done    ;				}
lcp	() {	lc ~/print ;					}
htxi	() {	n=`echo $1 | count \.`
		fil=`echo $1 | cut -f 1-$n -d .`
		lynx -image_links -force-html -dump $1 > "$fil".txt
	   	 unset fil n;					}
htx	() {	n=`echo $1 | count \.`
		fil=`echo $1 | cut -f 1-$n -d .`
		lynx  -force-html -dump $1 > "$fil".txt
	   	 unset fil n;					}
comp	() {	fil=~/.etc/.tmp/"$2"_"$3" 
		diff -y -W $1 $2 $3 > $fil
		vi  $fil; 	
		rm $fil ; unset fil;				}
testf	() {	mut;
		vi ~/.etc/addressbook ;				}

upload-rpm () {
	local directory
	local basenme
	directory=$1 ; shift

	if echo $* | grep 'src' ; then
		echo "You are trying to upload src rpm u moron."
		return;
	fi
	for i in $* ; do ;
		basenme=`echo $i | cut -f 1 -d '-'`
		ssh download.lxlabs.com "rm -v work/download.lxlabs.com/html/download/update/$directory/$basenme-*" ; 
	done

	for i in $* ; do ;
		scp $i download.lxlabs.com:work/download.lxlabs.com/html/download/update/$directory/ ; 
	done

	ssh download.lxlabs.com run-createrepo;
}

upload-rpm-without-rm () {
	local directory
	local basenme
	directory=$1 ; shift
	for i in $* ; do ;
		scp $i download.lxlabs.com:work/download.lxlabs.com/html/download/update/$directory/ ; 
	done
	ssh download.lxlabs.com run-createrepo;
}

run-createrepo () {
    cd ~/work/download.lxlabs.com/www/download/update/ ;
    for i in * ; do
        if ! [ -L $i ]  ; then
            echo running createrep for $i
            if [ -d $i/i386 ] ; then ;
                (cd $i/i386 ; createrepo . ; yum-arch . ;)
            fi
            if [ -d $i/x86_64 ] ; then ;
                (cd $i/x86_64 ; createrepo . ; yum-arch . ;)
            fi
        fi

    done
    (cd lxgeneral ; createrepo . ; yum-arch . ;)
}

xtm () { xterm -bg black -fg gray73 -fn 10x20 ; }
xtm-eight () { xterm -bg black -fg gray73 -fn 10x20 -geometry 77x19+0+0 ; }

show-url ()
{
	gnuclient -batch -eval "(w3m \"$1\")"
}


get-sms() {
	gnokii  --getsms IN 1 10 -d >> ~/dbase/sms/inbox.smslist
}
lxadmin-install-scp () {

cd ~/work
tar -czf ~/lxadmin-install.tgz lxadmin-install

scp ~/lxadmin-install.tgz $1:/home/root/work/download.lxlabs.com/html/download/
cd -

}

dvdo () { mplayer -fs -dvd-device /dev/cdrom dvd://$2 -chapter $1 } 
dvdp () { mplayer -alang en -fs -dvd-device /dev/cdrom dvd://$2 -chapter $1 } 
dvds () { mplayer -slang en -alang en -fs -dvd-device /dev/cdrom dvd://$2 -chapter $1 } 

code-get ()
{
	docheckhostname

	if [ $? = 1 ] ; then
		cvup-self
	else 
		(cd ../ ; cv up -d ; cd bin/common ; cv up -d ; cd ../../httpdocs/htmllib ; cv up -d ; cd ..; get-phplib)
		lphp.exe ../bin/common/fixdbonly.php
	fi
}

code-put ()
{
	docheckhostname
	if [ $? = 1 ] ; then
		ci-self
	else
		(cd ../ ; cv ci; )
	fi
}

gconf_change_accel() {
	gconftool-2 -s -t bool /desktop/gnome/interface/can_change_accels true
}

case `uname` in
*BSD)  source ~/.etc/bsdbash ;;
*Sun*)  source ~/.etc/sunbash ;;
*CYGWIN*)  source ~/.etc/cygbash ;;
*Interix*)  source ~/.etc/interix/intsh ;;
*)  source ~/.etc/linbash ;;
esac

if [ -f ~/.etc/local.bashrc ] ; then
	source ~/.etc/local.bashrc
fi


#source ~/.etc/commands.emacs

